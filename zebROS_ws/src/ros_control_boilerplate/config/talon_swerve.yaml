# ros_control_boilerplate Settings -----------------------
# Settings for ros_control control loop
generic_hw_control_loop:
  loop_hz: 50
  cycle_time_error_threshold: 0.01

# Settings for ros_control hardware interface
# Map a name for each valid joint to a CAN id
# For future expansion, change hw_id to specify one
# of several types of HW interface : CAN_id, PWM_id, DIO_id, AIO_id, etc.
hardware_interface:
   joints:
       - {name: fl_drive, type: can_talon_srx, can_id: 21}
       - {name: fl_angle, type: can_talon_srx, can_id: 11}
       - {name: fr_drive, type: can_talon_srx, can_id: 22}
       - {name: fr_angle, type: can_talon_srx, can_id: 12}
       - {name: br_drive, type: can_talon_srx, can_id: 23}
       - {name: br_angle, type: can_talon_srx, can_id: 13}
       - {name: bl_drive, type: can_talon_srx, can_id: 24}
       - {name: bl_angle, type: can_talon_srx, can_id: 14}

   # Add more data for each joint here - intitial mode, encoder type
   #    PIDF settings, limit switch settings, etc

# Create controllers for each joint
#
# Entry is the name of the controller. It can be anything.  
# It will create a namespace with that name under the main
# controller namespace. Subscribed topics for that controller
# will be most often show up under 
# <top level controller manager ns>/<controller ns>/topic
# e.g.
# /frcrobot/joint1_talon_controller/command
# /frcrobot/joint2_talon_controller/command
# /frcrobot/talon_states
#
# This one creates the /talon_states topic necessary in ROS
# It doesn't actually control anything, just takes the internal
# encoder state used by the hw manager and publishes it as
# a ROS topic.  This is generic ROS stuff, so we'll have
# to figure out what to map e.g. effort to in the Talon world
talon_state_controller:
   type:         talon_state_controller/TalonStateController
   publish_rate: 50

# Similar to above, but this one prints non-Talon state
# (stuff that fits into the more standard ROS position/
# speed/effort paradigm)
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 50

swerve_drive_controller:
    type:       talon_swerve_drive_controller/TalonSwerveDriveController
    
    speed: ['speed_joint_fl', 'speed_joint_fr', 'speed_joint_bl', 'speed_joint_br']
    steering: ['steering_joint_fl', 'steering_joint_fr', 'steering_joint_bl', 'steering_joint_br']
    publish_rate: 50
    pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
    twist_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 1000.0]
    # fix me
    wheel_radius: 0.0762
    max_speed: 3.3528
    mass: 70
    motor_free_speed: 5330
    motor_stall_torque: 2.41
    motor_quantity: 4
    file_name: "offsets.txt"
    invert_wheel_angle: False
    ratio_encoder_to_rotations: 20
    ratio_motor_to_rotations: 7
    ratio_motor_to_steering: 7
    encoder_drive_get_V_units: 1 
    encoder_drive_set_V_units: 1
    encoder_drive_get_P_units: 1 
    encoder_drive_set_P_units: 1
    encoder_steering_get_units: 1
    encoder_steering_set_units: 1
    
    cmd_vel_timeout: 0.5 # we test this separately, give plenty for the other tests
    speed_joint_fl:
        joint: fl_drive #fix pid
        close_loop_values:
            - {p: 0.2, i: 0.0007, d: 3, f: 0.09, i_zone: 0}
            - {p: 0.2, i: 0.0007, d: 3, f: 0.09, i_zone: 0}
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Relative
    speed_joint_fr:
        joint: fr_drive #fix pid
        close_loop_values:
            - {p: 0.2, i: 0.0007, d: 3, f: 0.09, i_zone: 0}
            - {p: 0.2, i: 0.0007, d: 3, f: 0.09, i_zone: 0}
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Relative
    speed_joint_bl:
        joint: bl_drive #fix pid
        close_loop_values:
            - {p: 0.2, i: 0.0007, d: 3, f: 0.09, i_zone: 0}
            - {p: 0.2, i: 0.0007, d: 3, f: 0.09, i_zone: 0}
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Relative
    speed_joint_br:
        joint: br_drive #fix pid
        close_loop_values:
            - {p: 0.2, i: 0.0007, d: 3, f: 0.09, i_zone: 0}
            - {p: 0.2, i: 0.0007, d: 3, f: 0.09, i_zone: 0}
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Relative
    steering_joint_fl:
        joint: fl_angle
        close_loop_values:
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
        invert_output: False
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Relative
    steering_joint_fr:
        joint: fr_angle
        close_loop_values:
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
        invert_output: False
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Relative
    steering_joint_br:
        joint: br_angle
        close_loop_values:
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
        invert_output: False
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Relative
    steering_joint_bl:
        joint: bl_angle
        close_loop_values:
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
            - {p: 6, i: 0.0006, d: 60, f: 0, i_zone: 700}
        invert_output: False
        sensor_phase: True
        feedback_type: CTRE_MagEncoder_Relative

